import { Component, OnInit, ViewChild, ElementRef, AfterViewInit, HostListener } from '@angular/core';
import { EditionMainDataInit } from '../edition-main-data/edition-main-data.component';
import { EditionToolsInit } from '../edition-tools/edition-tools.component';
import { AdvancedConfigsInit } from '../advanced-configs/advanced-configs.component';
import { NgbAccordion } from '@ng-bootstrap/ng-bootstrap';

@Component({
  selector: 'app-dashboard',
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.scss']
})
export class DashboardComponent implements AfterViewInit {
  @ViewChild('mainData', { static: true }) mainDataElement: ElementRef;
  @ViewChild('tools', { static: true }) toolsElement: ElementRef;
  @ViewChild('advanced', { static: true }) advancedElement: ElementRef;
  @ViewChild('mainContainer', { static: true }) mainContainerElement: ElementRef;
  @ViewChild('sectionsSidebar', { static: true }) sectionsSidebar: NgbAccordion;

  public sections: ConfigParamsSection[] = [{
    name: 'mainData',
    items: [
      { name: 'editionMainInfo' },
      { name: 'editionLevels' },
      { name: 'additionalContent' },
      { name: 'dataFormat' }
    ]
  }, {
    name: 'tools',
    items: [
      { name: 'imageTools' },
      { name: 'navigation' },
      { name: 'views' },
      { name: 'prefatoryMatter' },
      { name: 'search' },
      { name: 'viscoll' },
      { name: 'poetry' },
      { name: 'listsNE' }
    ]
  }, {
    name: 'advanced',
    items: [
      { name: 'pathParameters' },
      { name: 'autoGeneratedContent' },
      { name: 'xpathExpressions' }
    ]
  }];

  currentActive = '';
  currentSubSectionActive = '';

  private mainDataOffset: number = null;
  private toolsOffset: number = null;
  private advancedOffset: number = null;

  private editionMainInfoOffset: number = null;
  private editionLevelsOffset: number = null;
  private additionalContentOffset: number = null;
  private dataFormatOffset: number = null;

  private imageToolsOffset: number = null;
  private navigationOffset: number = null;
  private viewsOffset: number = null;
  private prefatoryMatterOffset: number = null;
  private searchOffset: number = null;
  private viscollOffset: number = null;
  private poetryOffset: number = null;
  private listsNEOffset: number = null;

  private pathParametersOffset: number = null;
  private autoGeneratedContentOffset: number = null;
  private xpathExpressionsOffset: number = null;

  private manualActivation = false;

  ngAfterViewInit() {
    this.mainDataOffset = this.mainDataElement.nativeElement.offsetTop;
    this.toolsOffset = this.toolsElement.nativeElement.offsetTop;
    this.advancedOffset = this.advancedElement.nativeElement.offsetTop;
  }

  setMainDataSectionsOffset(offsets: EditionMainDataInit) {
    this.editionMainInfoOffset = offsets.editionMainInfoOffset;
    this.editionLevelsOffset = offsets.editionLevelsOffset;
    this.additionalContentOffset = offsets.additionalContentOffset;
    this.dataFormatOffset = offsets.dataFormatOffset;
  }

  setEditionToolsSectionOffset(offsets: EditionToolsInit) {
    this.imageToolsOffset = offsets.imageToolsOffset;
    this.navigationOffset = offsets.navigationOffset;
    this.viewsOffset = offsets.viewsOffset;
    this.prefatoryMatterOffset = offsets.prefatoryMatterOffset;
    this.searchOffset = offsets.searchOffset;
    this.viscollOffset = offsets.viscollOffset;
    this.poetryOffset = offsets.poetryOffset;
    this.listsNEOffset = offsets.listsNEOffset;
  }

  setAdvancedSectionOffset(offsets: AdvancedConfigsInit) {
    this.pathParametersOffset = offsets.pathParametersOffset;
    this.autoGeneratedContentOffset = offsets.autoGeneratedContentOffset;
    this.xpathExpressionsOffset = offsets.xpathExpressionsOffset;
  }

  activateSection(sectionName, subSectionName) {
    this.manualActivation = true;
    this.currentActive = sectionName;
    this.currentSubSectionActive = subSectionName;
    setTimeout(() => this.manualActivation = false, 1000);
  }

  updateSidebar() {
    if (this.manualActivation) {
      return;
    }

    const pageYOffset = this.mainContainerElement.nativeElement.scrollTop;
    if (pageYOffset < this.mainDataOffset || (pageYOffset >= this.mainDataOffset && pageYOffset < this.toolsOffset)) {
      this.currentActive = 'mainData';
    } else if (pageYOffset >= this.toolsOffset && pageYOffset < this.advancedOffset) {
      this.currentActive = 'tools';
    } else if (pageYOffset >= this.advancedOffset) {
      this.currentActive = 'advanced';
    } else {
      this.currentActive = '';
    }
    if (this.currentActive) {
      this.sections.forEach((section: ConfigParamsSection) => {
        if (section.name === this.currentActive) {
          this.sectionsSidebar.expand(section.name);
        }
      });
    }

    if (pageYOffset >= this.editionMainInfoOffset && pageYOffset < this.editionLevelsOffset) {
      this.currentSubSectionActive = 'editionMainInfo';
    } else if (pageYOffset >= this.editionLevelsOffset && pageYOffset < this.additionalContentOffset) {
      this.currentSubSectionActive = 'editionLevels';
    } else if (pageYOffset >= this.additionalContentOffset && pageYOffset < this.dataFormatOffset) {
      this.currentSubSectionActive = 'additionalContent';
    } else if (pageYOffset >= this.dataFormatOffset && pageYOffset < this.imageToolsOffset) {
      this.currentSubSectionActive = 'dataFormat';
    } else if (pageYOffset >= this.imageToolsOffset && pageYOffset < this.navigationOffset) {
      this.currentSubSectionActive = 'imageTools';
    } else if (pageYOffset >= this.navigationOffset && pageYOffset < this.viewsOffset) {
      this.currentSubSectionActive = 'navigation';
    } else if (pageYOffset >= this.viewsOffset && pageYOffset < this.prefatoryMatterOffset) {
      this.currentSubSectionActive = 'views';
    } else if (pageYOffset >= this.prefatoryMatterOffset && pageYOffset < this.searchOffset) {
      this.currentSubSectionActive = 'prefatoryMatter';
    } else if (pageYOffset >= this.searchOffset && pageYOffset < this.viscollOffset) {
      this.currentSubSectionActive = 'search';
    } else if (pageYOffset >= this.viscollOffset && pageYOffset < this.poetryOffset) {
      this.currentSubSectionActive = 'viscoll';
    } else if (pageYOffset >= this.poetryOffset && pageYOffset < this.listsNEOffset) {
      this.currentSubSectionActive = 'poetry';
    } else if (pageYOffset >= this.listsNEOffset && pageYOffset < this.pathParametersOffset) {
      this.currentSubSectionActive = 'listsNE';
    } else if (pageYOffset >= this.pathParametersOffset && pageYOffset < this.autoGeneratedContentOffset) {
      this.currentSubSectionActive = 'pathParameters';
    } else if (pageYOffset >= this.autoGeneratedContentOffset && pageYOffset < this.xpathExpressionsOffset) {
      this.currentSubSectionActive = 'autoGeneratedContent';
    } else if (pageYOffset >= this.xpathExpressionsOffset) {
      this.currentSubSectionActive = 'xpathExpressions';
    } else {
      this.currentSubSectionActive = '';
    }
  }
}

interface ConfigParamsSection {
  name: string;
  items: ConfigParamGroup[];
}

interface ConfigParamGroup {
  name: string;
}

